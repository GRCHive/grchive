package(default_visibility = ["//visibility:public"])
load("@rules_pkg//:pkg.bzl", "pkg_tar")

filegroup(
    name = "corejsui-assets",
    srcs = glob([
        "assets/*.jpg",
    ]),
)

filegroup(
    name = "corejsui-files",
    srcs = glob([
        "ts/**/*.ts",
    ]) + glob([
        "vue/**/*.vue",
    ]) + glob([
        "sass/*.scss",
    ]) + [
        "@corejsui-npm//:node_modules",
        "tsconfig.json",
        "webpack/base.config.js",
        "webpack/dev.config.js",
        "webpack/prod.config.js",
        "package.json",
    ],
)

CMD_DEV = "cd src/core/jsui && rm -rf dist/* && npx webpack --config ./webpack/dev.config.js && tar czvf ../../../$@ dist/"

CMD_PROD = "cd src/core/jsui && rm -rf dist/* && npx webpack --config ./webpack/prod.config.js && tar czvf ../../../$@ dist/"

genrule(
    name = "corejsui-nosmap",
    srcs = [
        ":corejsui-files",
        "loader.ejs",
    ],
    outs = [
        "dist-nosmap.tar.gz",
    ],
    cmd = CMD_PROD,
    message = "Run Webpack for corejsui (no smap)",
    local = True,
)

genrule(
    name = "corejsui-smap",
    srcs = [
        ":corejsui-files",
        "loader.ejs",
    ],
    outs = [
        "dist-smap.tar.gz",
    ],
    cmd = CMD_DEV,
    message = "Run Webpack for corejsui (with smap)",
    local = True,
)

genrule(
    name = "corejsui",
    srcs = select({
        "//:production": [":corejsui-nosmap"],
        "//conditions:default": [":corejsui-smap"],
    }),
    outs = ["corejsui.zip"],
    cmd = "tar xvf $< -C corejsui && cd corejsui && zip -r $@ .",
)

genrule(
    name = "corejsui.tar",
    srcs = select({
        "//:production": [":corejsui-nosmap"],
        "//conditions:default": [":corejsui-smap"],
    }),
    outs = ["corejsui.tar.gz"],
    cmd = "cp $< $@"
)

genrule(
    name = "corejsui-loader-templates",
    srcs = [":corejsui"],
    outs = [
        "dashboard.tmpl",
        "main.tmpl",
    ],
    cmd = "unzip $(locations :corejsui) && \
        for X in $(OUTS); do \
            cp \"dist/`basename $$X`\" $$X;\
        done",
)

