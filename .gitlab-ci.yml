stages:
    - ciImage
    - prep
    - compile
    - test
    - containers
    - provision
    - migrate
    - predeploy
    - deploy0
    - deploy1
    - deploy2

variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    CI_FULL_REGISTRY: registry.gitlab.com/grchive/grchive
    PRODUCTION_GRCHIVE_PROJECT: "grchive"
    STAGING_GRCHIVE_PROJECT: "grchive-staging"

.common-before-script: &common-before-script
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "build -c opt" >> .bazelrc
    - echo "run -c opt" >> .bazelrc
    - echo "build --disk_cache=$CI_PROJECT_DIR/.cache" >> .bazelrc
    - echo "build --action_env=DOCKER_HOST" >> .bazelrc
    - echo "run --action_env=DOCKER_HOST" >> .bazelrc
    - echo "build --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "run --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "build --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - echo "run --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - cp -r /python ./dependencies/python
    - envsubst < build/variables.bzl.prod.tmpl > build/variables.bzl

.production-before-script: &production-before-script
    before_script:
        - *common-before-script
        - echo $GCLOUD_WEBSERVER_ACCOUNT > devops/gcloud/gcloud-webserver-account.json
        - echo $GCLOUD_TERRAFORM_ACCOUNT > devops/gcloud/gcloud-terraform-account.json
        - echo $GCLOUD_KUBERNETES_ACCOUNT > devops/gcloud/gcloud-kubernetes-account.json
        - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-kubernetes-account.json
        - gcloud config set project $PRODUCTION_GRCHIVE_PROJECT
        - gcloud config set compute/zone us-central1-c
        - export GRCHIVE_PROJECT=$PRODUCTION_GRCHIVE_PROJECT
        - export OKTA_CLIENT_SECRET=$PRODUCTION_OKTA_CLIENT_SECRET
        - export OKTA_CLIENT_ID="0oa1n0o8fPR0iSsIC4x6"
        - export GRCHIVE_PROJECT="grchive"
        - export GRCHIVE_URI="https://www.grchive.com"
        - export GRCHIVE_DOMAIN="grchive.com"
        - export GRCHIVE_DOC_BUCKET="grchive-prod"
        - rm build/variables.bzl && envsubst < build/variables.bzl.prod.tmpl > build/variables.bzl

.staging-before-script: &staging-before-script
    before_script:
        - *common-before-script
        - echo $STAGING_GCLOUD_WEBSERVER_ACCOUNT > devops/gcloud/gcloud-webserver-account.json
        - echo $STAGING_GCLOUD_TERRAFORM_ACCOUNT > devops/gcloud/gcloud-terraform-account.json
        - echo $STAGING_GCLOUD_KUBERNETES_ACCOUNT > devops/gcloud/gcloud-kubernetes-account.json
        - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-kubernetes-account.json
        - gcloud config set project $STAGING_GRCHIVE_PROJECT
        - gcloud config set compute/zone us-central1-c
        - export GRCHIVE_PROJECT=$STAGING_GRCHIVE_PROJECT
        - export OKTA_CLIENT_SECRET=$STAGING_OKTA_CLIENT_SECRET
        - export OKTA_CLIENT_ID="0oa25j979s1Txrkiz4x6"
        - export GRCHIVE_PROJECT="grchive-staging"
        - export GRCHIVE_URI="https://staging.grchive.com"
        - export GRCHIVE_DOMAIN="staging.grchive.com"
        - export GRCHIVE_DOC_BUCKET="grchive-staging"
        - rm build/variables.bzl && envsubst < build/variables.bzl.prod.tmpl > build/variables.bzl

include:
    - local: '/devops/gitlabci/flyway.yaml'
    - local: '/devops/gitlabci/terraform.yaml'
    - local: '/devops/gitlabci/deploy.yaml'
    - local: '/devops/gitlabci/build_test.yaml'
    - local: '/devops/gitlabci/containers.yaml'

default:
    cache:
        key: "${CI_COMMIT_REF_SLUG}-$CI_COMMIT_SHA"
        paths:
            - .cache/
            - src/core/jsui/node_modules/
    services:
        - docker:19.03.1-dind
    <<: *production-before-script

Build CI Image:
    stage: ciImage
    image: docker:stable
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/ci-image
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - cd devops/docker/ciImage
        - ./create_ciimage.sh $FULL_IMAGE_URL:latest
    cache: {}
    allow_failure: true
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          changes:
            - dependencies/bootstrap_bazel.sh
            - devops/docker/ciImage/**/*
          when: manual

Prepare:
    stage: prep
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel version
        - docker info

Compile All (Master):
    extends: .compile
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'

Run All Tests (Master):
    extends: .tests
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
