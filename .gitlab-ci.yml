stages:
    - ciImage
    - prep
    - compile
    - test
    - containers
    - provision
    - migrate
    - deploy

cache:
    key: "${CI_COMMIT_REF_SLUG}-$CI_COMMIT_SHA"
    paths:
        - .cache/
        - src/core/jsui/node_modules/

services:
    - docker:19.03.1-dind

variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    CI_FULL_REGISTRY: registry.gitlab.com/grchive/grchive

before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "build -c opt" >> .bazelrc
    - echo "run -c opt" >> .bazelrc
    - echo "build --disk_cache=$CI_PROJECT_DIR/.cache" >> .bazelrc
    - echo "build --action_env=DOCKER_HOST" >> .bazelrc
    - echo "run --action_env=DOCKER_HOST" >> .bazelrc
    - echo "build --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "run --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "build --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - echo "run --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - envsubst < build/variables.bzl.prod.tmpl > build/variables.bzl
    - cp -r /python ./dependencies/python
    - echo $GCLOUD_WEBSERVER_ACCOUNT > devops/gcloud/gcloud-webserver-account.json
    - echo $GCLOUD_TERRAFORM_ACCOUNT > devops/gcloud/gcloud-terraform-account.json
    - echo $GCLOUD_KUBERNETES_ACCOUNT > devops/gcloud/gcloud-kubernetes-account.json
    - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-kubernetes-account.json
    - gcloud config set project grchive
    - gcloud config set compute/zone us-central1-c

Build CI Image:
    stage: ciImage
    image: docker:stable
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/ci-image
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - cd devops/docker/ciImage
        - ./create_ciimage.sh $FULL_IMAGE_URL:latest
    cache: {}
    when: manual
    only:
        refs:
            - master
        changes:
            - dependencies/bootstrap_bazel.sh
            - devops/docker/ciImage/**/*

Prepare:
    stage: prep
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel version
        - docker info

Compile All:
    stage: compile
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel build //src/webserver:webserver
        - bazel build //src/preview_generator:frontend

Run All Tests:
    stage: test
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel test --test_output=errors //test/...

Build NGINX Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/nginx
    script:
        - bazel run //devops/docker/nginx:nginx 
        - docker tag bazel/devops/docker/nginx:nginx $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    only:
        refs:
            - master
        changes:
            - devops/docker/nginx/**/*

Build Vault Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/vault
    script:
        - bazel run //devops/docker/vault:vault 
        - docker tag bazel/devops/docker/vault:vault $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    only:
        refs:
            - master
        changes:
            - devops/vault/**/*
            - devops/docker/vault/**/*

Build RabbitMQ Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/rabbitmq
    script:
        - bazel run //devops/docker/rabbitmq:rabbitmq 
        - docker tag bazel/devops/docker/rabbitmq:rabbitmq $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    only:
        refs:
            - master
        changes:
            - devops/docker/rabbitmq/**/*

Build Preview Generator Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/preview_generator
    script:
        - bazel build //devops/docker/preview_generator:docker_preview_generator.tar
        - docker load -i bazel-bin/devops/docker/preview_generator/docker_preview_generator.tar
        - docker tag bazel/devops/docker/preview_generator:docker_preview_generator $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    only:
        refs:
            - master

Build Webserver Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/webserver
    script:
        - bazel build //devops/docker/webserver:docker_webserver.tar
        - docker load -i bazel-bin/devops/docker/webserver/docker_webserver.tar
        - docker tag bazel/devops/docker/webserver:docker_webserver $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    only:
        refs:
            - master

Terraform:
    stage: provision
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - cd devops/terraform/prod
        - export TF_VAR_postgres_user=${POSTGRES_USER}
        - export TF_VAR_postgres_password=${POSTGRES_PASSWORD}
        - export TF_VAR_postgres_instance_name=${POSTGRES_INSTANCE_NAME}
        - terraform init
        - terraform apply -auto-approve
    only:
        refs:
            - master
        changes:
            - devops/terraform/prod/**/*

Flyway Vault:
    stage: migrate
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-terraform-account.json
        - cloud_sql_proxy -instances=grchive:us-central1:${POSTGRES_INSTANCE_NAME}=tcp:5432 &
        - sleep 1
        - cd devops/database/vault
        - envsubst < flyway/prod-flyway.conf.tmpl > flyway/prod-flyway.conf
        - flyway -configFiles=./flyway/prod-flyway.conf migrate
    only:
        refs:
            - master
        changes:
            - devops/database/vault/**/*

Flyway Webserver:
    stage: migrate
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-terraform-account.json
        - cloud_sql_proxy -instances=grchive:us-central1:${POSTGRES_INSTANCE_NAME}=tcp:5432 &
        - sleep 1
        - cd devops/database/webserver
        - envsubst < flyway/prod-flyway.conf.tmpl > flyway/prod-flyway.conf
        - flyway -configFiles=./flyway/prod-flyway.conf migrate
    only:
        refs:
            - master
        changes:
            - devops/database/webserver/**/*

Deploy Secrets:
    stage: deploy
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - gcloud container clusters get-credentials webserver-gke-cluster
        - kubectl create secret generic gke-service-account --from-file=gke-service-account.json=devops/gcloud/gcloud-kubernetes-account.json -o yaml --dry-run --save-config | kubectl apply -f -
        - kubectl create secret docker-registry regcred --docker-server=registry.gitlab.com --docker-username=${GKE_REGISTRY_USER} --docker-password=${GKE_REGISTRY_PASSWORD} -o yaml --dry-run --save-config | kubectl apply -f -
    only:
        refs:
            - master

Deploy Vault:
    stage: deploy
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - gcloud container clusters get-credentials webserver-gke-cluster
        - export VAULT_IMAGE=$CI_FULL_REGISTRY/vault:$CI_COMMIT_SHA
        - cd devops/k8s/vault
        - envsubst < deployment.prod.yaml.tmpl > deployment.prod.yaml
        - kubectl apply -f service-internal.yaml -f service-external.dev.yaml -f deployment.prod.yaml
    only:
        refs:
            - master
        changes:
            - devops/docker/vault/**/*
            - devops/vault/**/*
