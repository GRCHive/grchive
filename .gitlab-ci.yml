stages:
    - ciImage
    - prep
    - compile
    - test
    - containers
    - provision
    - migrate
    - predeploy
    - deploy0
    - deploy1

variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    CI_FULL_REGISTRY: registry.gitlab.com/grchive/grchive
    PRODUCTION_GRCHIVE_PROJECT: "grchive"
    STAGING_GRCHIVE_PROJECT: "grchive-staging"

.common-before-script: &common-before-script
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "build -c opt" >> .bazelrc
    - echo "run -c opt" >> .bazelrc
    - echo "build --disk_cache=$CI_PROJECT_DIR/.cache" >> .bazelrc
    - echo "build --action_env=DOCKER_HOST" >> .bazelrc
    - echo "run --action_env=DOCKER_HOST" >> .bazelrc
    - echo "build --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "run --action_env=DOCKER_DRIVER" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_CERTDIR" >> .bazelrc
    - echo "build --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "run --action_env=DOCKER_TLS_VERIFY" >> .bazelrc
    - echo "build --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - echo "run --action_env=DOCKER_CERT_PATH" >> .bazelrc
    - envsubst < build/variables.bzl.prod.tmpl > build/variables.bzl
    - cp -r /python ./dependencies/python

.production-before-script: &production-before-script:
    - *common-before-script
    - echo $GCLOUD_WEBSERVER_ACCOUNT > devops/gcloud/gcloud-webserver-account.json
    - echo $GCLOUD_TERRAFORM_ACCOUNT > devops/gcloud/gcloud-terraform-account.json
    - echo $GCLOUD_KUBERNETES_ACCOUNT > devops/gcloud/gcloud-kubernetes-account.json
    - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-kubernetes-account.json
    - gcloud config set project grchive
    - gcloud config set compute/zone us-central1-c

.staging-before-script: &staging-before-script:
    - *common-before-script
    - echo $STAGING_GCLOUD_WEBSERVER_ACCOUNT > devops/gcloud/gcloud-webserver-account.json
    - echo $STAGING_GCLOUD_TERRAFORM_ACCOUNT > devops/gcloud/gcloud-terraform-account.json
    - echo $STAGING_GCLOUD_KUBERNETES_ACCOUNT > devops/gcloud/gcloud-kubernetes-account.json
    - gcloud auth activate-service-account --key-file devops/gcloud/gcloud-kubernetes-account.json
    - gcloud config set project grchive
    - gcloud config set compute/zone us-central1-c

include:
    - local: '/devops/gitlabci/flyway.yaml'
    - local: '/devops/gitlabci/terraform.yaml'
    - local: '/devops/gitlabci/deploy.yaml'
    - local: '/devops/gitlabci/environment.yaml'

default:
    cache:
        key: "${CI_COMMIT_REF_SLUG}-$CI_COMMIT_SHA"
        paths:
            - .cache/
            - src/core/jsui/node_modules/
    services:
        - docker:19.03.1-dind
    before_script:
        - *common-before-script

Build CI Image:
    stage: ciImage
    image: docker:stable
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/ci-image
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - cd devops/docker/ciImage
        - ./create_ciimage.sh $FULL_IMAGE_URL:latest
    cache: {}
    allow_failure: true
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          changes:
            - dependencies/bootstrap_bazel.sh
            - devops/docker/ciImage/**/*
          when: manual

Prepare:
    stage: prep
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel version
        - docker info

Compile All:
    stage: compile
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel build //src/webserver:webserver
        - bazel build //src/preview_generator:frontend

Run All Tests:
    stage: test
    image: $CI_FULL_REGISTRY/ci-image:latest
    script:
        - bazel test --test_output=errors //test/...

Build NGINX Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/nginx
    script:
        - bazel run //devops/docker/nginx:nginx 
        - docker tag bazel/devops/docker/nginx:nginx $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never

Build Vault Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/vault
    script:
        - bazel run //devops/docker/vault:vault 
        - docker tag bazel/devops/docker/vault:vault $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never
        - changes:
            - devops/vault/**/*
            - devops/docker/vault/**/*
        - when: never

Build RabbitMQ Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/rabbitmq
    script:
        - bazel run //devops/docker/rabbitmq:rabbitmq 
        - docker tag bazel/devops/docker/rabbitmq:rabbitmq $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never
        - changes:
            - devops/docker/rabbitmq/**/*
        - when: never

Build Preview Generator Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/preview_generator
    script:
        - bazel build //devops/docker/preview_generator:docker_preview_generator.tar
        - docker load -i bazel-bin/devops/docker/preview_generator/docker_preview_generator.tar
        - docker tag bazel/devops/docker/preview_generator:docker_preview_generator $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never

Build Webserver Container:
    stage: containers
    image: $CI_FULL_REGISTRY/ci-image:latest
    variables:
        FULL_IMAGE_URL: $CI_FULL_REGISTRY/webserver
    script:
        - bazel build //devops/docker/webserver:docker_webserver.tar
        - docker load -i bazel-bin/devops/docker/webserver/docker_webserver.tar
        - docker tag bazel/devops/docker/webserver:docker_webserver $FULL_IMAGE_URL:$CI_COMMIT_SHA
        - docker push $FULL_IMAGE_URL:$CI_COMMIT_SHA
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
          when: never

Terraform (Production):
    extends: .terraform
    before_script:
        - *production-before-script
    variables:
        TERRAFORM_FOLDER: "prod"
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Terraform (Staging):
    extends: .terraform
    before_script:
        - *staging-before-script
    variables:
        TERRAFORM_FOLDER: "staging"
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Flyway Vault (Production):
    extends: .flyway-vault
    before_script:
        - *production-before-script
    variables:
        GRCHIVE_PROJECT: "$PRODUCTION_GRCHIVE_PROJECT"
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Flyway Webserver (Production):
    extends: .flyway-webserver
    before_script:
        - *production-before-script
    variables:
        GRCHIVE_PROJECT: "$PRODUCTION_GRCHIVE_PROJECT"
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Flyway Vault (Staging):
    extends: .flyway-vault
    before_script:
        - *staging-before-script
    variables:
        GRCHIVE_PROJECT: "$STAGING_GRCHIVE_PROJECT"
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Flyway Webserver (Staging):
    extends: .flyway-webserver
    before_script:
        - *staging-before-script
    variables:
        GRCHIVE_PROJECT: "$STAGING_GRCHIVE_PROJECT"
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Secrets (Production):
    extends: .deploy-secrest
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Storage (Production):
    extends: .deploy-storage
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Lets Encrypt (Production):
    extends: .deploy-lets-encrypt
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Vault (Production):
    extends: .deploy-vault
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy RabbitMQ (Production):
    extends: .deploy-rabbitmq
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Preview Generator (Production):
    extends: .deploy-preview-generator
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Webserver (Production):
    extends: .deploy-webserver
    before_script:
        - *production-before-script
    variables:
        RELEASE_BRANCH: "production"
    environment:
        name: Production

Deploy Secrets (Staging):
    extends: .deploy-secrest
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Storage (Staging):
    extends: .deploy-storage
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Lets Encrypt (Staging):
    extends: .deploy-lets-encrypt
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Vault (Staging):
    extends: .deploy-vault
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy RabbitMQ (Staging):
    extends: .deploy-rabbitmq
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Preview Generator (Staging):
    extends: .deploy-preview-generator
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging

Deploy Webserver (Staging):
    extends: .deploy-webserver
    before_script:
        - *staging-before-script
    variables:
        RELEASE_BRANCH: "staging"
    environment:
        name: Staging
